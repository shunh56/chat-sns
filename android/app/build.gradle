plugins {
    id "com.android.application"
    id "kotlin-android"
    // START: FlutterFire Configuration
    id 'com.google.gms.google-services'
    id 'com.google.firebase.firebase-perf'
    id 'com.google.firebase.crashlytics'
    // END: FlutterFire Configuration
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}


def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

// Dart Definesから値を取得する関数

// dart_definesから環境変数を取得（dart_definesが存在する場合のみ）
def getAppId(String defaultValue) {
    def localDartDefines = [:]
    if (project.hasProperty('dart-defines')) {
        project.property('dart-defines').split(',').each {
            def decoded = new String(Base64.decoder.decode(it))
            def pair = decoded.split('=')
            if (pair.length == 2) {
                localDartDefines[pair[0]] = pair[1]
            }
        }
        if (localDartDefines.APP_ID) {
            return localDartDefines.APP_ID
        }
    }
    return defaultValue
}

def getAppName(String defaultValue) {
    def localDartDefines = [:]
    if (project.hasProperty('dart-defines')) {
        project.property('dart-defines').split(',').each {
            def decoded = new String(Base64.decoder.decode(it))
            def pair = decoded.split('=')
            if (pair.length == 2) {
                localDartDefines[pair[0]] = pair[1]
            }
        }
        if (localDartDefines.APPNAME) {
            return localDartDefines.APPNAME
        }
    }
    return defaultValue
}

android {
    namespace  'com.blank.sns'
    compileSdk = 34
    //ndkVersion = flutter.ndkVersion
    ndkVersion "25.1.8937393"

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    defaultConfig {
        multiDexEnabled true
        //applicationId = devMode?"com.blank.sns.dev":"com.blank.sns"
        minSdk = 26
        targetSdk = flutter.targetSdkVersion
        versionCode = 10//flutterVersionCode.toInteger()
        versionName = flutterVersionName
    }

    signingConfigs {
       release {
           keyAlias keystoreProperties['keyAlias']
           keyPassword keystoreProperties['keyPassword']
           storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
           storePassword keystoreProperties['storePassword']
       }
    }


    flavorDimensions "environment"
    productFlavors {
        dev {
            dimension "environment"
            // dart_definesから取得した値を使用
            applicationId getAppId("com.blank.sns.dev")
            buildConfigField "String", "FLAVOR_NAME", "\"dev\""
            resValue "string", "app_name", getAppName("BLANK DEV")
        }
        prod {
            dimension "environment"
            // dart_definesから取得した値を使用（デフォルトは元の値を維持）
            applicationId getAppId("com.blank.sns")
            buildConfigField "String", "FLAVOR_NAME", "\"prod\""
            resValue "string", "app_name", getAppName("BLANK")
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            minifyEnabled true
            shrinkResources true
        }
        debug {
            // デバッグビルドの設定
        }
    }

    // google-services.jsonを環境に応じて切り替える
    applicationVariants.all { variant ->

        def flavorName = variant.flavorName
        def targetJson = flavorName == 'dev' ? 'google-services-dev.json' : 'google-services-prod.json'
        
        variant.preBuild.doFirst {
            copy {
                from file("${projectDir}/${targetJson}")
                into projectDir
                rename { String fileName ->
                    'google-services.json'
                }
            }
        }
    }
    
    packagingOptions {
        pickFirst 'lib/arm64-v8a/libaosl.so'
        pickFirst 'lib/armeabi-v7a/libaosl.so'  // 他のアーキテクチャ向けも同様に設定
        pickFirst 'lib/x86/libaosl.so'
        pickFirst 'lib/x86_64/libaosl.so'
    }
}

flutter {
    source = "../.."
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.2.2'
}