platform :ios, '14.0'

ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup
# Override Firebase SDK Version - Use 10.28.0 to test gRPC fixes
$FirebaseSDKVersion = '10.28.0'

# Force C++17 to avoid gRPC-Core compilation issues with Xcode 16
ENV['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++17'
ENV['CLANG_CXX_LIBRARY'] = 'libc++'

pre_install do |installer|
  # Remove duplicate aosl.xcframework before installation
  Pod::Installer::Xcode::TargetValidator.send(:define_method, :verify_no_duplicate_framework_and_library_names) {}
end

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  # FirebaseË®≠ÂÆö
  pod 'Firebase', $FirebaseSDKVersion, :modular_headers => true
  pod 'Firebase/Analytics', $FirebaseSDKVersion, :modular_headers => true
  pod 'Firebase/Core', $FirebaseSDKVersion, :modular_headers => true
  pod 'Firebase/Firestore', $FirebaseSDKVersion, :modular_headers => true
  pod 'Firebase/Database', $FirebaseSDKVersion, :modular_headers => true
  pod 'Firebase/Messaging', $FirebaseSDKVersion, :modular_headers => true
  pod 'FirebaseCore', $FirebaseSDKVersion, :modular_headers => true
  pod 'FirebaseDatabase', $FirebaseSDKVersion, :modular_headers => true

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))

  target 'RunnerTests' do
    inherit! :search_paths
  end
end

post_install do |installer|
  # Remove duplicate aosl.xcframework from AgoraRtm (keep AgoraInfra_iOS version)
  # This prevents the "frameworks with conflicting names" error
  agora_rtm_pod = installer.pod_targets.find { |t| t.name == 'AgoraRtm' }
  if agora_rtm_pod
    aosl_path = "#{agora_rtm_pod.sandbox.pod_dir('AgoraRtm')}/aosl.xcframework"
    if File.exist?(aosl_path)
      puts "Removing duplicate aosl.xcframework from AgoraRtm pod"
      FileUtils.rm_rf(aosl_path)
    end
  end

  # Fix gRPC-Core C++ compilation issue with Xcode 16+ (Enhanced)
  puts "üîç Searching for gRPC targets..."
  grpc_targets = []

  # Global C++17 enforcement for all targets first
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      # Force C++17 globally to prevent any C++20 template issues
      config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++17'
      config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'

      # Global C++ warning suppression for template compatibility
      config.build_settings['OTHER_CPLUSPLUSFLAGS'] ||= ['$(inherited)']
      config.build_settings['OTHER_CPLUSPLUSFLAGS'] << '-std=c++17'
      config.build_settings['OTHER_CPLUSPLUSFLAGS'] << '-Wno-error=c++20-extensions'
      config.build_settings['OTHER_CPLUSPLUSFLAGS'] << '-Wno-c++20-extensions'
      config.build_settings['OTHER_CFLAGS'] ||= ['$(inherited)']
      config.build_settings['OTHER_CFLAGS'] << '-Wno-error=c++20-extensions'
      config.build_settings['OTHER_CFLAGS'] << '-Wno-c++20-extensions'
    end
  end

  # Specific gRPC target handling
  installer.pods_project.targets.each do |target|
    if target.name.include?('gRPC') || target.name.include?('grpc') || target.name == 'gRPC-Core' || target.name == 'gRPC-C++'
      grpc_targets << target.name
      puts "üì¶ Found gRPC target: #{target.name}"

      target.build_configurations.each do |config|
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'GPR_FORBID_UNREACHABLE_CODE=1'
        config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'

        # Enhanced C++17 enforcement for gRPC targets
        config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++17'
        config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'

        # Additional C++ compatibility flags
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] ||= ['$(inherited)']
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] << '-std=c++17'
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] << '-Wno-error=c++20-extensions'
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] << '-Wno-c++20-extensions'
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] << '-Wno-template-id-cdtor'
        config.build_settings['OTHER_CFLAGS'] ||= ['$(inherited)']
        config.build_settings['OTHER_CFLAGS'] << '-Wno-error=c++20-extensions'
        config.build_settings['OTHER_CFLAGS'] << '-Wno-c++20-extensions'

        puts "‚úÖ Applied enhanced C++17 fix to #{target.name} (#{config.name})"
      end
    end
  end

  puts "üìä Total gRPC targets modified: #{grpc_targets.length}"
  puts "üîß gRPC targets: #{grpc_targets.join(', ')}" unless grpc_targets.empty?
  puts "üåê Applied global C++17 enforcement to all #{installer.pods_project.targets.length} targets"

  # Fix Agora RTC Engine compilation issues
  puts "üé• Applying Agora RTC Engine fixes..."
  agora_targets = []

  installer.pods_project.targets.each do |target|
    if target.name.include?('agora_rtc_engine')
      agora_targets << target.name
      puts "üìπ Found Agora target: #{target.name}"

      target.build_configurations.each do |config|
        # Ensure ARC is enabled for Agora
        config.build_settings['CLANG_ENABLE_OBJC_ARC'] = 'YES'
        # Add specific Objective-C++ flags
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] ||= ['$(inherited)']
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] << '-fobjc-arc'
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] << '-fno-objc-arc-exceptions'
        # Ensure proper language standard
        config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++17'

        puts "‚úÖ Applied Agora fixes to #{target.name} (#{config.name})"
      end
    end
  end

  puts "üìπ Total Agora targets modified: #{agora_targets.length}"
  puts "üé• Agora targets: #{agora_targets.join(', ')}" unless agora_targets.empty?

  # Fix Agora RTC Engine source code weakSelf issue
  puts "üîß Fixing Agora RTC Engine source code weakSelf issue..."

  # Try multiple possible paths for agora_rtc_engine
  possible_paths = [
    # Pub cache path (for CI/CD)
    File.expand_path("~/.pub-cache/hosted/pub.dev/agora_rtc_engine-6.5.3/ios/agora_rtc_engine/Sources/agora_rtc_engine/AgoraSurfaceViewFactory.mm"),
    # Local Pods path (for local development)
    "#{Dir.pwd}/Pods/agora_rtc_engine/ios/agora_rtc_engine/Sources/agora_rtc_engine/AgoraSurfaceViewFactory.mm",
    # Symlink path
    "#{Dir.pwd}/.symlinks/plugins/agora_rtc_engine/ios/agora_rtc_engine/Sources/agora_rtc_engine/AgoraSurfaceViewFactory.mm"
  ]

  agora_surface_view_factory_path = nil
  possible_paths.each do |path|
    if File.exist?(path)
      agora_surface_view_factory_path = path
      puts "üìÅ Found AgoraSurfaceViewFactory.mm at: #{path}"
      break
    end
  end

  if agora_surface_view_factory_path
    # Read the file content
    content = File.read(agora_surface_view_factory_path)

    puts "üîç Analyzing AgoraSurfaceViewFactory.mm content..."
    puts "   - File size: #{content.length} bytes"
    puts "   - Contains 'weakSelf': #{content.include?('weakSelf')}"
    puts "   - Contains '__weak typeof(self) weakSelf': #{content.include?('__weak typeof(self) weakSelf')}"

    # Check if the file needs to be fixed
    needs_fix = content.include?('weakSelf') && !content.include?('__weak typeof(self) weakSelf')

    # Force fix even if our detection is imperfect - apply comprehensive patterns
    if content.include?('weakSelf') || content.match(/\]\s*\{\s*[^}]*weakSelf/)
      puts "üîß Applying comprehensive weakSelf fix to AgoraSurfaceViewFactory.mm..."

      # Store original content for backup
      original_content = content.dup

      # Pattern 1: Fix blocks that use weakSelf without declaration
      # Look for any block { followed by weakSelf usage
      content = content.gsub(
        /(\{\s*\n\s*)weakSelf/,
        '\1__weak typeof(self) weakSelf = self;\n        weakSelf'
      )

      # Pattern 2: Fix dispatch_async blocks specifically
      content = content.gsub(
        /dispatch_async\s*\([^)]+\)\s*\^\s*\{\s*\n\s*weakSelf/,
        "dispatch_async(dispatch_get_main_queue(), ^{\n        __weak typeof(self) weakSelf = self;\n        weakSelf"
      )

      # Pattern 3: Fix any remaining standalone weakSelf without declaration
      # Split by lines and fix each problematic usage
      lines = content.split("\n")
      fixed_lines = []
      i = 0

      while i < lines.length
        line = lines[i]

        # If this line contains weakSelf but we haven't seen a declaration
        if line.match(/\bweakSelf\b/) && !line.include?('__weak typeof(self) weakSelf')
          # Look backwards to see if there's a recent declaration
          has_recent_declaration = false
          (i-5..i-1).each do |j|
            if j >= 0 && lines[j] && lines[j].include?('__weak typeof(self) weakSelf')
              has_recent_declaration = true
              break
            end
          end

          # If no recent declaration, add one before this line
          unless has_recent_declaration
            indent = line[/^\s*/]
            fixed_lines << "#{indent}__weak typeof(self) weakSelf = self;"
          end
        end

        fixed_lines << line
        i += 1
      end

      # Join back and finalize
      content = fixed_lines.join("\n")

      # Pattern 4: Final safety check - forced fix for known problematic lines
      # Based on CI/CD error at lines 41, 44, 45 - ensure we have proper declarations
      content = content.gsub(
        /^(\s*)(.*weakSelf.*$)/,
        proc do |match|
          indentation = $1
          line_content = $2

          # Check if this line already has a declaration or is itself a declaration
          if line_content.include?('__weak typeof(self) weakSelf') ||
             line_content.match(/typeof.*weakSelf.*=/)
            match # Keep as-is if it's a declaration
          else
            # Add declaration before the line
            "#{indentation}__weak typeof(self) weakSelf = self;\n#{match}"
          end
        end
      )

      # Write the fixed content back
      File.write(agora_surface_view_factory_path, content)
      puts "‚úÖ Applied comprehensive weakSelf fix to AgoraSurfaceViewFactory.mm"
      puts "   - Original size: #{original_content.length} bytes"
      puts "   - Fixed size: #{content.length} bytes"

    else
      puts "‚ÑπÔ∏è No weakSelf usage found in AgoraSurfaceViewFactory.mm"
    end
  else
    puts "‚ö†Ô∏è AgoraSurfaceViewFactory.mm not found at any expected path:"
    possible_paths.each { |path| puts "   - #{path}" }
  end

  installer.aggregate_targets.each do |target|
    target.xcconfigs.each do |variant, xcconfig|
      xcconfig_path = target.client_root + target.xcconfig_relative_path(variant)
      IO.write(xcconfig_path, IO.read(xcconfig_path).gsub("DT_TOOLCHAIN_DIR", "TOOLCHAIN_DIR"))
    end
  end
  
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
    if target.name == 'BoringSSL-GRPC'
      target.source_build_phase.files.each do |file|
        if file.settings && file.settings['COMPILER_FLAGS']
          flags = file.settings['COMPILER_FLAGS'].split
          flags.reject! { |flag| flag == '-GCC_WARN_INHIBIT_ALL_WARNINGS' }
          file.settings['COMPILER_FLAGS'] = flags.join(' ')
        end
      end
    end
    target.build_configurations.each do |config|
      # Âü∫Êú¨Ë®≠ÂÆö
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '14.0'
      config.build_settings['ENABLE_BITCODE'] = 'NO'
      # Allow non-modular includes - Critical for Xcode 16 + Firebase compatibility
      config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
      config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
      
      # '-G' „Ç™„Éó„Ç∑„Éß„É≥ÂïèÈ°å„ÅÆËß£Ê±∫
      config.build_settings['OTHER_CFLAGS'] ||= ['$(inherited)']
      config.build_settings.delete('OTHER_CFLAGS') if config.build_settings['OTHER_CFLAGS'].empty?
      
      # „Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£Èñ¢ÈÄ£„ÅÆË®≠ÂÆö
      #config.build_settings['ONLY_ACTIVE_ARCH'] = 'NO'
      #config.build_settings['VALID_ARCHS'] = 'arm64 arm64e'
      #config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'i386'
      config.build_settings['ENABLE_BITCODE'] = 'NO'
      config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
      
      if config.base_configuration_reference.is_a? Xcodeproj::Project::Object::PBXFileReference
        xcconfig_path = config.base_configuration_reference.real_path
        IO.write(xcconfig_path, IO.read(xcconfig_path).gsub("DT_TOOLCHAIN_DIR", "TOOLCHAIN_DIR"))
      end
      
      # „Éë„Éº„Éü„ÉÉ„Ç∑„Éß„É≥Ë®≠ÂÆö
      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= [
        '$(inherited)',
        'PERMISSION_CAMERA=1',
        'PERMISSION_MICROPHONE=1',
        'PERMISSION_PHOTOS=1',
        'PERMISSION_NOTIFICATIONS=1'
      ]
    end
  end
end