platform :ios, '14.0'

ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup
# Override Firebase SDK Version
$FirebaseSDKVersion = '10.24.0'

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  # Firebase設定
  pod 'Firebase', $FirebaseSDKVersion, :modular_headers => true
  pod 'Firebase/Analytics', $FirebaseSDKVersion, :modular_headers => true
  pod 'Firebase/Core', $FirebaseSDKVersion, :modular_headers => true
  pod 'Firebase/Firestore', $FirebaseSDKVersion, :modular_headers => true
  pod 'Firebase/Database', $FirebaseSDKVersion, :modular_headers => true
  pod 'Firebase/Messaging', $FirebaseSDKVersion, :modular_headers => true
  pod 'FirebaseCore', $FirebaseSDKVersion, :modular_headers => true
  pod 'FirebaseDatabase', $FirebaseSDKVersion, :modular_headers => true
  
  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
  
  target 'RunnerTests' do
    inherit! :search_paths
  end
end

post_install do |installer|

  # Debug duplicate frameworks
  puts "=== Checking for duplicate frameworks ==="
  installer.pods_project.targets.each do |target|
    puts "#{target.name}:"
    if target.respond_to?(:frameworks_build_phase) && target.frameworks_build_phase
      target.frameworks_build_phase.files.each do |file|
        if file.display_name && file.display_name.include?("aosl")
          puts "  Found aosl framework: #{file.display_name}"
        end
      end
    end
  end
  puts "=== End framework check ==="

  # Remove duplicate aosl.xcframework
  installer.pods_project.targets.each do |target|
    if target.respond_to?(:frameworks_build_phase) && target.frameworks_build_phase
      files_to_remove = []
      target.frameworks_build_phase.files.each do |file|
        if file.display_name && file.display_name.include?("aosl.xcframework")
          files_to_remove << file
        end
      end
      # Keep only the first instance, remove duplicates
      files_to_remove[1..-1]&.each do |file|
        puts "Removing duplicate framework: #{file.display_name}"
        target.frameworks_build_phase.remove_file_reference(file)
      end
    end
  end

  installer.aggregate_targets.each do |target|
    target.xcconfigs.each do |variant, xcconfig|
      xcconfig_path = target.client_root + target.xcconfig_relative_path(variant)
      IO.write(xcconfig_path, IO.read(xcconfig_path).gsub("DT_TOOLCHAIN_DIR", "TOOLCHAIN_DIR"))
    end
  end
  
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
    if target.name == 'BoringSSL-GRPC'
      target.source_build_phase.files.each do |file|
        if file.settings && file.settings['COMPILER_FLAGS']
          flags = file.settings['COMPILER_FLAGS'].split
          flags.reject! { |flag| flag == '-GCC_WARN_INHIBIT_ALL_WARNINGS' }
          file.settings['COMPILER_FLAGS'] = flags.join(' ')
        end
      end
    end
    target.build_configurations.each do |config|
      # 基本設定
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '14.0'
      config.build_settings['ENABLE_BITCODE'] = 'NO'
      config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
      config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
      
      # '-G' オプション問題の解決
      config.build_settings['OTHER_CFLAGS'] ||= ['$(inherited)']
      config.build_settings.delete('OTHER_CFLAGS') if config.build_settings['OTHER_CFLAGS'].empty?
      
      # アーキテクチャ関連の設定
      #config.build_settings['ONLY_ACTIVE_ARCH'] = 'NO'
      #config.build_settings['VALID_ARCHS'] = 'arm64 arm64e'
      #config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'i386'
      config.build_settings['ENABLE_BITCODE'] = 'NO'
      config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
      
      if config.base_configuration_reference.is_a? Xcodeproj::Project::Object::PBXFileReference
        xcconfig_path = config.base_configuration_reference.real_path
        IO.write(xcconfig_path, IO.read(xcconfig_path).gsub("DT_TOOLCHAIN_DIR", "TOOLCHAIN_DIR"))
      end
      
      # パーミッション設定
      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= [
        '$(inherited)',
        'PERMISSION_CAMERA=1',
        'PERMISSION_MICROPHONE=1',
        'PERMISSION_PHOTOS=1',
        'PERMISSION_NOTIFICATIONS=1'
      ]
    end
  end
end