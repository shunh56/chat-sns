default_platform(:ios)

# gRPC修正を適用するヘルパー関数
def apply_grpc_fixes
  require 'xcodeproj'

  begin
    project_path = "Runner.xcworkspace"
    UI.message("🔍 Searching for gRPC targets in project...")

    # 直接ビルド設定を修正
    sh('find Pods -name "*.xcconfig" -exec grep -l "gRPC\\|GRPC" {} \\; | head -10 | while IFS= read -r file; do
      echo "📝 Patching $file"
      if ! grep -q "CLANG_CXX_LANGUAGE_STANDARD.*c++17" "$file"; then
        echo "CLANG_CXX_LANGUAGE_STANDARD = c++17" >> "$file"
      fi
      if ! grep -q "GCC_WARN_INHIBIT_ALL_WARNINGS.*YES" "$file"; then
        echo "GCC_WARN_INHIBIT_ALL_WARNINGS = YES" >> "$file"
      fi
    done')

    UI.success("✅ Applied direct gRPC fixes to build configuration files")

  rescue => e
    UI.error("❌ Failed to apply gRPC fixes: #{e.message}")
  end
end

platform :ios do
  desc "Build and upload to TestFlight"
  lane :beta do |options|
    # 環境変数から環境を取得（dev/prod/appstore）
    environment = options[:env] || "dev"

    # アプリIDの設定
    app_identifier = "com.blank.sns"

    # 証明書とプロファイルの取得（Match使用）
    # 初回設定時はコメントアウトして手動で設定
    # match(type: "appstore", readonly: true)

    # ビルド番号の自動インクリメント
    increment_build_number(
      build_number: latest_testflight_build_number + 1,
      xcodeproj: "Runner.xcodeproj"
    )

    # Flutterビルド（Makefileのコマンドを使用）
    sh("cd ../.. && make build-#{environment}")

    # TestFlightへアップロード
    upload_to_testflight(
      ipa: "../../build/ios/ipa/*.ipa",
      skip_waiting_for_build_processing: true,
      changelog: "自動ビルド from #{environment} environment"
    )
  end

  desc "Build for Firebase App Distribution"
  lane :firebase do |options|
    # 環境変数から環境を取得（dev/prod）
    environment = options[:env] || "dev"

    # ビルド番号の自動インクリメント
    increment_build_number(
      build_number: Time.now.to_i,
      xcodeproj: "Runner.xcodeproj"
    )

    # Matchを試行するが、失敗した場合はautomatic signingにフォールバック
    begin
      # MATCH_GIT_URLが設定されているか確認
      if !ENV["MATCH_GIT_URL"] || ENV["MATCH_GIT_URL"].empty?
        UI.important("MATCH_GIT_URL is not set. Skipping Match and using automatic signing.")
        raise "No MATCH_GIT_URL"
      end

      UI.message("Attempting to use Fastlane Match for certificate management...")

      # Matchで証明書とプロビジョニングプロファイルを同期（API Key認証で）
      match(
        type: "adhoc",
        app_identifier: "com.blank.sns",
        readonly: true,
        git_url: ENV["MATCH_GIT_URL"],
        api_key_path: File.expand_path("~/private_keys/AuthKey_#{ENV['APP_STORE_CONNECT_API_KEY_ID']}.p8"),
        api_key: {
          key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
          issuer_id: ENV["APP_STORE_CONNECT_API_ISSUER_ID"],
          key: ENV["APP_STORE_CONNECT_API_KEY_CONTENT"],
          in_house: false
        }
      )

      UI.success("✅ Fastlane Match completed successfully!")

    rescue => e
      UI.important("⚠️  Fastlane Match failed: #{e.message}")
      UI.important("Falling back to automatic signing with App Store Connect API Key...")

      # API Key情報を環境変数に設定（automatic signingで使用）
      ENV["APP_STORE_CONNECT_API_KEY_PATH"] = File.expand_path("~/private_keys/AuthKey_#{ENV['APP_STORE_CONNECT_API_KEY_ID']}.p8")
    end

    # gRPC修正を再適用（Flutter buildでpod installが実行されるため）
    UI.message("🔧 Re-applying gRPC C++17 fixes before Flutter build...")
    apply_grpc_fixes

    # Flutter iOS ビルド（署名なし）
    sh("cd ../.. && flutter build ios --release --dart-define-from-file=dart_defines/#{environment}.env --no-codesign")

    # gymでアーカイブ+署名+エクスポート（allowProvisioningUpdatesを使用）
    gym(
      scheme: "Runner",
      workspace: "Runner.xcworkspace",
      configuration: "Release",
      export_method: "ad-hoc",
      xcargs: "-allowProvisioningUpdates CODE_SIGN_STYLE=Automatic DEVELOPMENT_TEAM=CDQBCQRWL9",
      export_options: {
        signingStyle: "automatic",
        teamID: "CDQBCQRWL9",
        allowProvisioningUpdates: true
      },
      output_directory: "../../build/ios/ipa",
      output_name: "Runner.ipa"
    )

    # Firebase App Distributionへアップロード
    firebase_app_distribution(
      app: ENV["FIREBASE_APP_ID_IOS"],
      ipa_path: lane_context[SharedValues::IPA_OUTPUT_PATH],
      groups: "testers",
      release_notes: "自動ビルド from #{environment} environment"
    )
  end

  desc "Setup certificates and provisioning profiles"
  lane :setup_certs do
    # Matchの初期設定（初回のみ実行）
    match(
      type: "development",
      app_identifier: "com.blank.sns",
      readonly: false
    )

    match(
      type: "adhoc",
      app_identifier: "com.blank.sns",
      readonly: false
    )

    match(
      type: "appstore",
      app_identifier: "com.blank.sns",
      readonly: false
    )
  end
end