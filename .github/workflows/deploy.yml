name: Deploy to TestFlight & Firebase (Optimized)

on:
  push:
    branches: [ develop ]
  pull_request:
    types: [ closed ]
    branches: [ main ]

env:
  FLUTTER_VERSION: '3.24.3'

jobs:
  # 並列実行でビルド時間を半分に
  deploy-ios:
    if: github.event_name == 'push' || github.event.pull_request.merged == true
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v4

    # 🚀 改善1: Flutter + 依存関係キャッシュ強化
    - name: Cache Flutter SDK
      uses: actions/cache@v3
      with:
        path: |
          /Users/runner/hostedtoolcache/flutter
        key: ${{ runner.os }}-flutter-${{ env.FLUTTER_VERSION }}

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    # 🚀 改善2: pub依存関係の積極的キャッシュ
    - name: Cache pub dependencies
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.PUB_CACHE }}
          ~/.pub-cache
          .dart_tool
        key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-pub-

    - name: Install Flutter dependencies
      run: flutter pub get

    # CocoaPodsキャッシュは削除（常にクリーンインストール）
    # 重複フレームワークの問題を避けるため

    - name: Setup Ruby & Fastlane (cached)
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true
        working-directory: ios

    - name: Install pods (with conflict resolution)
      run: |
        cd ios
        echo "🧹 Cleaning previous pod installation..."
        rm -rf Pods Podfile.lock .symlinks

        echo "🔄 Installing fresh pods..."
        pod deintegrate || true
        pod repo update
        pod install --repo-update

        echo "✅ Pods installed successfully"

    - name: Determine environment
      id: env
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "environment=prod" >> $GITHUB_OUTPUT
        else
          echo "environment=dev" >> $GITHUB_OUTPUT
        fi

    # 🚀 改善4: 証明書キャッシュ
    - name: Cache signing certificates
      id: cert-cache
      uses: actions/cache@v3
      with:
        path: |
          certificate.p12
          build.keychain
        key: ios-cert-${{ hashFiles('ios/Runner.xcodeproj/project.pbxproj') }}-v1

    # 記事の成功例に基づく改善：Keychainの適切な設定（条件付き実行）
    - name: Setup Keychain and Certificates
      if: env.IOS_DISTRIBUTION_CERTIFICATE_BASE64 != ''
      env:
        CERTIFICATE_BASE64: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_BASE64 }}
        CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
      run: |
        # Only run if certificate is provided
        if [ -z "$CERTIFICATE_BASE64" ]; then
          echo "⚠️ No certificate provided, skipping keychain setup"
          exit 0
        fi

        # Create temporary keychain
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        KEYCHAIN_PASSWORD=$(openssl rand -base64 32)

        # Store keychain path for cleanup
        echo "TEMP_KEYCHAIN_PATH=$KEYCHAIN_PATH" >> $GITHUB_ENV

        # Decode certificates and profiles
        echo "$CERTIFICATE_BASE64" | base64 --decode > $RUNNER_TEMP/distribution.p12
        echo "$PROVISIONING_PROFILE_BASE64" | base64 --decode > $RUNNER_TEMP/profile.mobileprovision

        # Create and configure keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # Import certificate
        security import $RUNNER_TEMP/distribution.p12 -P "$CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # Install provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $RUNNER_TEMP/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

        echo "✅ Certificates and provisioning profiles configured"

    - name: Setup App Store Connect API Key
      env:
        API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
        API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
      run: |
        # Create API Key directory
        mkdir -p ~/private_keys

        # Create API Key file
        echo "$API_KEY_CONTENT" > ~/private_keys/AuthKey_${API_KEY_ID}.p8

        # Set file permissions
        chmod 600 ~/private_keys/AuthKey_${API_KEY_ID}.p8

        # Export environment variables for xcodebuild
        echo "APP_STORE_CONNECT_API_KEY_ID=$API_KEY_ID" >> $GITHUB_ENV
        echo "APP_STORE_CONNECT_API_ISSUER_ID=$API_ISSUER_ID" >> $GITHUB_ENV
        echo "APP_STORE_CONNECT_API_KEY_PATH=$HOME/private_keys/AuthKey_${API_KEY_ID}.p8" >> $GITHUB_ENV

        echo "✅ App Store Connect API Key configured"

    # 🚀 改善5: Firebase配布のみ（develop用）
    - name: Deploy to Firebase App Distribution
      if: github.ref == 'refs/heads/develop'
      env:
        FIREBASE_APP_ID_IOS: ${{ secrets.FIREBASE_APP_ID_IOS_DEV }}
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
        APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
      run: |
        cd ios
        bundle exec fastlane firebase env:${{ steps.env.outputs.environment }}

    # TestFlightは本番のみ（時間短縮）
    - name: Deploy to TestFlight
      if: github.ref == 'refs/heads/main'
      env:
        APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
        APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
      run: |
        cd ios
        bundle exec fastlane beta env:${{ steps.env.outputs.environment }}

  deploy-android:
    if: github.event_name == 'push' || github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    # 🚀 改善6: Flutter + Gradle キャッシュ
    - name: Cache Flutter SDK
      uses: actions/cache@v3
      with:
        path: |
          /opt/hostedtoolcache/flutter
        key: ${{ runner.os }}-flutter-${{ env.FLUTTER_VERSION }}

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Cache pub dependencies
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.PUB_CACHE }}
          ~/.pub-cache
          .dart_tool
        key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-pub-

    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'

    # 🚀 改善7: Gradle + Android SDK キャッシュ
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ~/.android/avd/*
          ~/.android/adb*
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Install Flutter dependencies
      run: flutter pub get

    - name: Setup Ruby & Fastlane (cached)
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true
        working-directory: android

    - name: Determine environment
      id: env
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "environment=prod" >> $GITHUB_OUTPUT
        else
          echo "environment=dev" >> $GITHUB_OUTPUT
        fi

    - name: Decode Keystore
      env:
        ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      run: |
        echo $ANDROID_KEYSTORE_BASE64 | base64 --decode > android/app/key.jks

    - name: Create key.properties
      env:
        ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
        ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        ANDROID_STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD }}
      run: |
        echo "storePassword=$ANDROID_STORE_PASSWORD" > android/key.properties
        echo "keyPassword=$ANDROID_KEY_PASSWORD" >> android/key.properties
        echo "keyAlias=$ANDROID_KEY_ALIAS" >> android/key.properties
        echo "storeFile=key.jks" >> android/key.properties

    # Firebase配布のみ（develop）
    - name: Deploy to Firebase App Distribution
      if: github.ref == 'refs/heads/develop'
      env:
        FIREBASE_APP_ID_ANDROID: ${{ secrets.FIREBASE_APP_ID_ANDROID_DEV }}
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      run: |
        cd android
        bundle exec fastlane firebase env:${{ steps.env.outputs.environment }}

    # Google Playは本番のみ
    - name: Deploy to Google Play Internal Testing
      if: github.ref == 'refs/heads/main'
      env:
        GOOGLE_PLAY_JSON_KEY_BASE64: ${{ secrets.GOOGLE_PLAY_JSON_KEY_BASE64 }}
      run: |
        echo $GOOGLE_PLAY_JSON_KEY_BASE64 | base64 --decode > android/play-store-key.json
        cd android
        bundle exec fastlane beta env:${{ steps.env.outputs.environment }}

    # Keychainクリーンアップ（記事の成功例に基づく）
    - name: Cleanup keychain
      if: always() && env.TEMP_KEYCHAIN_PATH != ''
      run: |
        if [ -n "$TEMP_KEYCHAIN_PATH" ]; then
          security delete-keychain $TEMP_KEYCHAIN_PATH || true
        fi

  # 🚀 改善8: 軽量な通知ジョブ
  notify-completion:
    needs: [deploy-ios, deploy-android]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Slack Notification
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: custom
        custom_payload: |
          {
            text: "🚀 Deployment completed!",
            attachments: [{
              color: '${{ needs.deploy-ios.result == 'success' && needs.deploy-android.result == 'success' && 'good' || 'danger' }}',
              fields: [{
                title: 'iOS Deploy',
                value: '${{ needs.deploy-ios.result }}',
                short: true
              }, {
                title: 'Android Deploy',
                value: '${{ needs.deploy-android.result }}',
                short: true
              }]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}