name: Deploy to TestFlight & Firebase

on:
  push:
    branches: [ develop ]
  pull_request:
    types: [ closed ]
    branches: [ main ]

env:
  FLUTTER_VERSION: '3.24.3'

jobs:
  deploy-ios:
    if: github.event_name == 'push' || github.event.pull_request.merged == true
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
        bundler-cache: true
        working-directory: ios

    - name: Install dependencies
      run: flutter pub get

    - name: Install pods
      run: |
        cd ios
        pod install

    - name: Setup Fastlane
      run: |
        cd ios
        bundle install

    - name: Determine environment
      id: env
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "environment=prod" >> $GITHUB_OUTPUT
        else
          echo "environment=dev" >> $GITHUB_OUTPUT
        fi

    - name: Decode signing certificate
      env:
        CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
        CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
      run: |
        echo $CERTIFICATE_BASE64 | base64 --decode > certificate.p12
        security create-keychain -p "" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security import certificate.p12 -k build.keychain -P $CERTIFICATE_PASSWORD -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain

    - name: Deploy to Firebase App Distribution
      if: github.ref == 'refs/heads/develop'
      env:
        FIREBASE_APP_ID_IOS: ${{ secrets.FIREBASE_APP_ID_IOS_DEV }}
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      run: |
        cd ios
        bundle exec fastlane firebase env:${{ steps.env.outputs.environment }}

    - name: Deploy to TestFlight
      if: github.ref == 'refs/heads/main'
      env:
        APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
        APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
      run: |
        cd ios
        bundle exec fastlane beta env:${{ steps.env.outputs.environment }}

  deploy-android:
    if: github.event_name == 'push' || github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
        bundler-cache: true
        working-directory: android

    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: Install dependencies
      run: flutter pub get

    - name: Setup Fastlane
      run: |
        cd android
        bundle install

    - name: Determine environment
      id: env
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "environment=prod" >> $GITHUB_OUTPUT
        else
          echo "environment=dev" >> $GITHUB_OUTPUT
        fi

    - name: Decode Keystore
      env:
        ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      run: |
        echo $ANDROID_KEYSTORE_BASE64 | base64 --decode > android/app/key.jks

    - name: Create key.properties
      env:
        ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
        ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        ANDROID_STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD }}
      run: |
        echo "storePassword=$ANDROID_STORE_PASSWORD" > android/key.properties
        echo "keyPassword=$ANDROID_KEY_PASSWORD" >> android/key.properties
        echo "keyAlias=$ANDROID_KEY_ALIAS" >> android/key.properties
        echo "storeFile=key.jks" >> android/key.properties

    - name: Deploy to Firebase App Distribution
      if: github.ref == 'refs/heads/develop'
      env:
        FIREBASE_APP_ID_ANDROID: ${{ secrets.FIREBASE_APP_ID_ANDROID_DEV }}
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      run: |
        cd android
        bundle exec fastlane firebase env:${{ steps.env.outputs.environment }}

    - name: Deploy to Google Play Internal Testing
      if: github.ref == 'refs/heads/main'
      env:
        GOOGLE_PLAY_JSON_KEY_BASE64: ${{ secrets.GOOGLE_PLAY_JSON_KEY_BASE64 }}
      run: |
        echo $GOOGLE_PLAY_JSON_KEY_BASE64 | base64 --decode > android/play-store-key.json
        cd android
        bundle exec fastlane beta env:${{ steps.env.outputs.environment }}

  notify-slack:
    needs: [deploy-ios, deploy-android]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          デプロイ結果:
          - iOS: ${{ needs.deploy-ios.result }}
          - Android: ${{ needs.deploy-android.result }}
          環境: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Development' }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        channel: '#deployments'